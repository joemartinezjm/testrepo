name: Build and Push Container Images

on:
  push:

env:
  REGISTRY: ghcr.io
  REPO_NAME: ${{ github.repository }}

jobs:
  detect-changes:
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.filter.outputs.matrix }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Detect changed folders with Dockerfiles
        id: filter
        run: |
          # Ensure we have a valid base reference for comparison
          if git rev-parse --verify ${{ github.event.before }} >/dev/null 2>&1; then
            BASE_REF=${{ github.event.before }}
          else
            echo "Previous commit not found, using last commit instead."
            BASE_REF=$(git rev-parse HEAD^ || echo HEAD)
          fi

          echo "Comparing changes from $BASE_REF to ${{ github.sha }}"

          # Detect changed folders (since last commit) but only directories with a Dockerfile
          CHANGED_FOLDERS=$(git diff --name-only $BASE_REF ${{ github.sha }} | awk -F/ '{print $1}' | sort -u | while read dir; do
            if [ -d "$dir" ] && [ -f "$dir/Dockerfile" ]; then
              echo "$dir"
            fi
          done | jq -R -s -c 'split("\n")[:-1]')

          # Detect newly added folders containing a Dockerfile
          NEW_FOLDERS=$(git ls-tree -d --name-only HEAD | while read dir; do
            if [ -f "$dir/Dockerfile" ]; then
              echo "$dir"
            fi
          done | jq -R -s -c 'split("\n")[:-1]')

          # Combine changed and new folders, ensuring uniqueness
          COMBINED_FOLDERS=$(jq -c -n --argjson a "$CHANGED_FOLDERS" --argjson b "$NEW_FOLDERS" '$a + $b | unique')

          # Use changed folders if detected, otherwise use an empty list
          if [[ "$COMBINED_FOLDERS" == "[]" ]]; then
            echo "No changes detected, skipping build."
            echo "matrix=[]" >> "$GITHUB_OUTPUT"
          else
            echo "Changed or newly added folders detected: $COMBINED_FOLDERS"
            echo "matrix=$COMBINED_FOLDERS" >> "$GITHUB_OUTPUT"
          fi

  build-and-push:
    runs-on: ubuntu-latest
    needs: detect-changes
    if: ${{ needs.detect-changes.outputs.matrix != '[]' }} # Only run if there are changes
    strategy:
      matrix:
        folder: ${{ fromJson(needs.detect-changes.outputs.matrix) }}
    permissions:
      contents: read
      packages: write
      id-token: write
      attestations: write
      
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata (tags, labels) for ${{ matrix.folder }}
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.REPO_NAME }}/${{ matrix.folder }}
          
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3      

      - name: Build and push Docker image for ${{ matrix.folder }}
        id: push
        uses: docker/build-push-action@v6
        with:
          context: ${{ matrix.folder }}
          sbom: true
          push: true
          provenance: mode=max
          platforms: linux/amd64,linux/arm64
          tags: |
            ${{ env.REGISTRY }}/${{ env.REPO_NAME }}/${{ matrix.folder }}:latest
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          load: false

      # - name: Install Cosign
      #   uses: sigstore/cosign-installer@main

      # - name: Sign the container image with Cosign
      #   run: |
      #     cosign sign --yes --key env://COSIGN_PRIVATE_KEY \
      #       ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}@${{ steps.push.outputs.digest }}
      #   env:
      #     COSIGN_PRIVATE_KEY: ${{ secrets.COSIGN_PRIVATE_KEY }}

      # - name: Generate Build Provenance Attestation
      #   uses: actions/attest-build-provenance@v1
      #   with:
      #     subject-name: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
      #     subject-digest: ${{ steps.push.outputs.digest }}
